// ROLLUP_NO_REPLACE 
 const _4__fetchContentDataRenderPages = "{\"parsed\":{\"_path\":\"/blogs/fetch-content-data-render-pages\",\"_dir\":\"blogs\",\"_draft\":false,\"_partial\":false,\"_locale\":\"\",\"title\":\"如何正确获取 Nuxt Content 数据并在 Nuxt 页面中渲染\",\"description\":\"在这里我们将学习如何正确获取 Nuxt Content 数据并在 Nuxt 页面中渲染\",\"date\":\"2023年3月1日\",\"image\":\"/blogs-img/blog4.jpg\",\"alt\":\"如何正确获取 Nuxt Content 数据并在 Nuxt 页面中渲染\",\"ogImage\":\"/blogs-img/blog4.jpg\",\"tags\":[\"nuxt\",\"nuxt-content\"],\"published\":true,\"body\":{\"type\":\"root\",\"children\":[{\"type\":\"element\",\"tag\":\"h3\",\"props\":{\"id\":\"介绍\"},\"children\":[{\"type\":\"text\",\"value\":\"介绍\"}]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"Nuxt.js 是一个用于构建 Vue.js 应用程序的流行开源框架。随着 Nuxt 3 的发布，开发者可以访问新功能和改进来简化开发过程。其中一个功能是 Nuxt Content v2，它允许你以简单高效的方式创建和管理内容。在这篇博客文章中，我们将指导你完成将 Nuxt Content v2 与 Nuxt 3 连接的步骤。\"}]},{\"type\":\"element\",\"tag\":\"h3\",\"props\":{\"id\":\"步骤-1安装必要的依赖\"},\"children\":[{\"type\":\"text\",\"value\":\"步骤 1：安装必要的依赖\"}]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"第一步是安装 Nuxt Content v2 的必要依赖。为此，运行以下命令：\"}]},{\"type\":\"element\",\"tag\":\"pre\",\"props\":{\"className\":[\"language-js\"],\"code\":\"npm install @nuxt/content@next\\n\\n\",\"language\":\"js\",\"meta\":\"\"},\"children\":[{\"type\":\"element\",\"tag\":\"code\",\"props\":{\"__ignoreMap\":\"\"},\"children\":[{\"type\":\"text\",\"value\":\"npm install @nuxt/content@next\\n\\n\"}]}]},{\"type\":\"element\",\"tag\":\"h3\",\"props\":{\"id\":\"步骤-2配置-nuxt-content-v2\"},\"children\":[{\"type\":\"text\",\"value\":\"步骤 2：配置 Nuxt Content v2\"}]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"安装依赖后，你需要在 Nuxt 3 项目中配置 Nuxt Content v2。为此，在项目根目录中创建一个名为 nuxt.config.js 的新文件并添加以下代码：\"}]},{\"type\":\"element\",\"tag\":\"pre\",\"props\":{\"className\":[\"language-js\"],\"code\":\"export default {\\n  // 启用 Nuxt Content 模块\\n  modules: [\\n    '@nuxt/content'\\n  ],\\n\\n\",\"language\":\"js\",\"meta\":\"\"},\"children\":[{\"type\":\"element\",\"tag\":\"code\",\"props\":{\"__ignoreMap\":\"\"},\"children\":[{\"type\":\"text\",\"value\":\"export default {\\n  // 启用 Nuxt Content 模块\\n  modules: [\\n    '@nuxt/content'\\n  ],\\n\\n\"}]}]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"在上面的代码中，我们启用了 Nuxt Content 模块并设置了存储内容的目录。\"}]},{\"type\":\"element\",\"tag\":\"h3\",\"props\":{\"id\":\"步骤-3创建内容文件\"},\"children\":[{\"type\":\"text\",\"value\":\"步骤 3：创建内容文件\"}]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"配置 Nuxt Content v2 后，你可以在指定目录中创建内容文件。默认情况下，Nuxt Content v2 支持 Markdown 和 YAML 文件格式。你可以在 \"},{\"type\":\"element\",\"tag\":\"code\",\"props\":{\"className\":[]},\"children\":[{\"type\":\"text\",\"value\":\"content\"}]},{\"type\":\"text\",\"value\":\" 目录中创建一个具有以下结构的新文件：\"}]},{\"type\":\"element\",\"tag\":\"pre\",\"props\":{\"className\":[\"language-md\"],\"code\":\"---\\ntitle: '你好，世界！'\\n---\\n\\n# 欢迎使用 Nuxt Content v2\\n\\n这是使用 Nuxt Content v2 创建的 Markdown 文件示例。\\n\",\"language\":\"md\",\"meta\":\"\"},\"children\":[{\"type\":\"element\",\"tag\":\"code\",\"props\":{\"__ignoreMap\":\"\"},\"children\":[{\"type\":\"text\",\"value\":\"---\\ntitle: '你好，世界！'\\n---\\n\\n# 欢迎使用 Nuxt Content v2\\n\\n这是使用 Nuxt Content v2 创建的 Markdown 文件示例。\\n\"}]}]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"在上面的代码中，我们创建了一个带有标题和示例内容的 Markdown 文件。\"}]},{\"type\":\"element\",\"tag\":\"h3\",\"props\":{\"id\":\"步骤-4在页面上显示内容\"},\"children\":[{\"type\":\"text\",\"value\":\"步骤 4：在页面上显示内容\"}]},{\"type\":\"element\",\"tag\":\"p\",\"props\":{},\"children\":[{\"type\":\"text\",\"value\":\"现在我们已经创建了内容文件，我们可以在页面上显示内容。为此，在 components 目录中创建一个新的 Vue 组件，代码如下：\"}]},{\"type\":\"element\",\"tag\":\"pre\",\"props\":{\"className\":[\"language-vue\"],\"code\":\"<script setup lang=\\\"ts\\\">\\nconst { path } = useRoute()\\nconst articles = await queryContent(path).findOne()\\n</script>\\n\\n<template>\\n  <main>\\n    <div>\\n      <ContentRenderer :value=\\\"articles\\\">\\n        <template #empty>\\n          <p>No content found.</p>\\n        </template>\\n      </ContentRenderer>\\n    </div>\\n  </main>\\n</template>\\n\",\"language\":\"vue\",\"meta\":\"\"},\"children\":[{\"type\":\"element\",\"tag\":\"code\",\"props\":{\"__ignoreMap\":\"\"},\"children\":[{\"type\":\"text\",\"value\":\"<script setup lang=\\\"ts\\\">\\nconst { path } = useRoute()\\nconst articles = await queryContent(path).findOne()\\n</script>\\n\\n<template>\\n  <main>\\n    <div>\\n      <ContentRenderer :value=\\\"articles\\\">\\n        <template #empty>\\n          <p>No content found.</p>\\n        </template>\\n      </ContentRenderer>\\n    </div>\\n  </main>\\n</template>\\n\"}]}]}],\"toc\":{\"title\":\"\",\"searchDepth\":2,\"depth\":2,\"links\":[{\"id\":\"介绍\",\"depth\":3,\"text\":\"介绍\"},{\"id\":\"步骤-1安装必要的依赖\",\"depth\":3,\"text\":\"步骤 1：安装必要的依赖\"},{\"id\":\"步骤-2配置-nuxt-content-v2\",\"depth\":3,\"text\":\"步骤 2：配置 Nuxt Content v2\"},{\"id\":\"步骤-3创建内容文件\",\"depth\":3,\"text\":\"步骤 3：创建内容文件\"},{\"id\":\"步骤-4在页面上显示内容\",\"depth\":3,\"text\":\"步骤 4：在页面上显示内容\"}]}},\"_type\":\"markdown\",\"_id\":\"content:blogs:4. fetch-content-data-render-pages.md\",\"_source\":\"content\",\"_file\":\"blogs/4. fetch-content-data-render-pages.md\",\"_stem\":\"blogs/4. fetch-content-data-render-pages\",\"_extension\":\"md\"},\"hash\":\"8UuISsjBFG\"}";

export { _4__fetchContentDataRenderPages as default };
//# sourceMappingURL=4. fetch-content-data-render-pages.mjs.map
